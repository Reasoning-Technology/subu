
SHELL=/bin/bash

# some versions of Linux need a -e option others complain if there is a -e .. and it isn't the binary for echo ..
ECHO= echo
#ECHO= echo -e

# directories used by this makefile, these could all be set to dot for
# the simplest source directory structure

#$(PWD) is the directory that make was called from, this is already build in
TMPDIR=1_tmp
EXECSDIR=1_execs
HDIR=1_headers
LIBDIR=1_lib
TOOLSDIR=$(realpath ../tools)

# some important files
DEPS_FILE=$(TMPDIR)/makefile_deps
LIB_FILE=$(LIBDIR)/libsubu.a

# external tools called out in this makefile
SUID_TOOL=$(TOOLSDIR)/bin/setuid_root.sh

# compiler and flags
CC=gcc
CFLAGS=-std=gnu11 -fPIC -I. -ggdb -Werror -DDEBUG -DDEBUGDB 
#CFLAGS=-std=gnu11 -fPIC -I. -Werror
LINKFLAGS=-L1_lib -lsubu -lsqlite3

### end of user defined variables
###--------------------------------------------------------------------------------

# a single space literal, for example if you wanted to subsitute commas to
# spaces: $(subst $(space),;,$(string)) we ran into this out of a need to send
# multiple separate command arguments to a shell script from one variable value
blank :=
space :=$(blank)  $(blank)

# files used by the compiler
SOURCES_LIB= $(wildcard *.lib.c)
SOURCES_CLI= $(wildcard *.cli.c)
SOURCES= $(SOURCES_LIB) $(SOURCES_CLI)

HFILES = $(wildcard *.lib.h) $(wildcard *.cli.h)

OBJECTS_LIB= $(patsubst %.c, %.o, $(SOURCES_LIB))
OBJECTS_CLI= $(patsubst %.c, %.o, $(SOURCES_CLI))
OBJECTS= $(OBJECTS_LIB) $(OBJECTS_CLI)

EXECS= $(sort $(patsubst %.cli.c,  %, $(wildcard *.cli.c)))

all: version deps lib execs

version:
	@echo '---- make $@:------------------------------------------------------------'
	@echo makefile version 3.0
	@echo "PWD: " $(PWD)
	@echo "MAKEFILE_LIST: " $(MAKEFILE_LIST)
	@echo "TMPDIR: " $(TMPDIR)
	@echo "EXECSDIR: " $(EXECSDIR)
	@echo "HDIR: " $(HDIR)
	@echo "LIBDIR: " $(LIBDIR)
	@echo "DEPS_FILE: " $(DEPS_FILE)
	@echo "LIB_FILE: " $(LIB_FILE)
	@echo "CC: " $(CC)
	@echo "CFLAGS: " $(CFLAGS)
	@echo "LINKFLAGS: " $(LINKFLAGS)
	@echo "SUID_TOOL: " $(SUID_TOOL)
	@echo '______end make $@_____'

lists:
	@echo '---- make $@:------------------------------------------------------------'
	@echo "SOURCES_LIB: " $(SOURCES_LIB)
	@echo "SOURCES_CLI: " $(SOURCES_CLI)
	@echo "SOURCES: " $(SOURCES)
	@echo "HFILES: " $(HFILES)
	@echo "OBJECTS_LIB: " $(OBJECTS_LIB)
	@echo "OBJECTS_CLI: " $(OBJECTS_CLI)
	@echo "OBJECTS: " $(OBJECTS)
	@echo "EXECS: " $(EXECS)
	@echo '______end make $@_____'

# should be safe to run this in an already setup or partially setup directory
setup:
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	if [ ! -e $(TMPDIR) ]; then mkdir $(TMPDIR); fi
	if [ ! -e 1_deprecated ]; then mkdir 1_deprecated; fi
	if [ ! -e 1_doc ]; then mkdir 1_doc; fi
	if [ ! -e 1_execs ]; then mkdir 1_execs; fi
	if [ ! -e 1_headers ]; then mkdir 1_headers; fi
	if [ ! -e 1_lib ]; then mkdir 1_lib; fi
	if [ ! -e 1_tests ]; then mkdir 1_tests; fi
	if [ ! -e 1_try ]; then mkdir 1_try; fi
	@echo '______end make $@_____'

deps:
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	makeheaders $(SOURCES) $(HFILES)
	sed -i '/^ *int *main *(.*)/d' *.h
	$(CC) $(CFLAGS) -MM $(SOURCES) 1> $(DEPS_FILE)
	for i in $(EXECS) ; do\
           $(ECHO) >> $(DEPS_FILE);\
           $(ECHO) "$(EXECSDIR)/$$i : $$i.cli.o $(LIB_FILE)" >> $(DEPS_FILE);\
           $(ECHO) "	$(CC) -o $(EXECSDIR)/$$i $$i.cli.o $(LINKFLAGS)" >> $(DEPS_FILE);\
        done
	@echo '______end make $@_____'

lib: 
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	if [ ! -e $(DEPS_FILE) ]; then make deps; fi
	make sub_lib
	@echo '______end make $@_____'

sub_lib: $(LIB_FILE)


execs: $(LIB_FILE)
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	if [ ! -e $(DEPS_FILE) ]; then make deps; fi
	make sub_execs
	@echo "-> $(SUID_TOOL) $(EXECSDIR)/subu-mk-0 $(EXECSDIR)/subu-rm-0 $(EXECSDIR)/subu-bind-all"
	cat $(SUID_TOOL)
	@echo -n "Are you sure? [y/N] " && read ans && [ $${ans:-N} == y ]
	sudo $(SUID_TOOL) $(EXECSDIR)/subu-mk-0 $(EXECSDIR)/subu-rm-0 $(EXECSDIR)/subu-bind-all
	@echo '______end make $@_____'

sub_execs: $(patsubst %,  $(EXECSDIR)/%, $(EXECS))

#not ready yet
install: all
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	@if[ ! -e 1_tests_passed ]; then echo "can't install as tests have not passed"; fi
	@test -e test_passed
	for i in $(EXECSDIR); do cp $$i $(RT_BASE)/bin; done
	cp $(LIB_FILE) $(RT_BASE)/lib
	cp $(APPLICATION).h  $(RT_BASE)/include
	if [ -d $(APPLICATION) ]; then cp $(APPLICATION)/*.h $(RT_BASE)/include/$(APPLICATION); fi
	@echo '______end make $@_____'

# not written yet
# copies stuff from the src dir to the stage dirs
# stage:

clean:
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	if [ -f subudb ]; then rm subudb; fi
	for i in $(wildcard *~); do mv $$i $(TMPDIR); done
	for i in $(wildcard *.lib.o) $(wildcard *.cli.o); do rm $$i; done 
	for i in $(HFILES); do mv $$i $(TMPDIR); done # just in case someone wrote a header file
	for i in $(EXECS); do if [ -e $(EXECSDIR)/$$i ]; then rm $(EXECSDIR)/$$i; fi; done 
	if [ -f $(LIB_FILE) ]; then rm $(LIB_FILE); fi
	if [ -f $(DEPS_FILE) ]; then rm $(DEPS_FILE); fi
	@echo '______end make $@_____'


# not ready ...
# dist_clean is used to clean thing up before doing a checkin,  hg add should be safe after a dist_clean
# dist_clean will recurse into the include directory = $(APPLICATION), tests, and try if they are present 
# 
dist-clean:
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	make clean
#	if [ -d $(APPLICATION) ]; then cd $(APPLICATION); make clean; fi
#	if [ -d 1_tests ]; then cd 1_tests; make dist_clean; fi
#	if [ -d 1_try ] ; then cd 1_try; make dist_clean; fi
	@echo '______end make $@_____'

#
$(LIB_FILE) : $(OBJECTS_LIB)
	ar rcs $(LIB_FILE) $(OBJECTS_LIB)

-include $(DEPS_FILE)

# recipe for making object files:
#
%.o : %.c
	$(CC) $(CFLAGS) -c $<


