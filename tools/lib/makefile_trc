
# We should read the tranche sources and see what files they output, and then
# build the deps accordingly, but this makefile is more primitive approach.
# Here the programmer must have one output .c file or .cc file per input tranche
# file and it must be name <base>.{lib,cli}.{c,cc} and the {.c,.cc} output
# tranche must be named <base>.trc.{c,cc}

# will re-orgnaize the directory structure .. will name the src-da .. etc. to the
# name of the module, then have a source dir inside that has only the stuff
# programmer's edit, then get rid of the numbers

SHELL=/bin/bash

#LIDBIR, EXECDIR, HDIR hold the make results that might later be staged
#$(PWD) is the directory that make was called from, this is already build in
#set to dot to use the same directory as the source code
#leave blank to ommit
DEPRDIR=deprecated
DOCDIR=doc
EXECDIR=exec
INCDIR=include
LIBDIR=lib
SRCDIR=src
TESTDIR=test
TMPDIR=tmp
TOOLSDIR=$(realpath $(PROJECT_SUBU)/tools)
TRYDIR=try

LIBFILE=$(LIBDIR)/lib$(MODULE).a
INCFILE=$(MODULE).h

# these are the sources edited by the programmer
C_SOURCE_LIB=  $(wildcard $(SRCDIR)/*.lib.c)
C_SOURCE_CLI=  $(wildcard $(SRCDIR)/*.cli.c)
CC_SOURCE_LIB= $(wildcard $(SRCDIR)/*.lib.cc)
CC_SOURCE_CLI= $(wildcard $(SRCDIR)/*.cli.cc)

#remove the suffix to get base name
C_BASE_LIB=  $(sort $(patsubst %.lib.c,  %, $(notdir $(C_SOURCE_LIB))))
C_BASE_CLI=  $(sort $(patsubst %.cli.c,  %, $(notdir $(C_SOURCE_CLI))))
CC_BASE_LIB= $(sort $(patsubst %.lib.cc, %, $(notdir $(CC_SOURCE_LIB))))
CC_BASE_CLI= $(sort $(patsubst %.cli.cc, %, $(notdir $(CC_SOURCE_CLI))))

# the progreammer must name the c and cc tranches accordingly:
C_TRC_LIB= $(patasubst %, $(TMPDIR)/%.trc.c, C_BASE_LIB)
C_TRC_CLI= $(patasubst %, $(TMPDIR)/%.trc.c, C_BASE_CLI)
CC_TRC_LIB= $(patasubst %, $(TMPDIR)/%.trc.cc, CC_BASE_LIB)
CC_TRC_CLI= $(patasubst %, $(TMPDIR)/%.trc.cc, CC_BASE_CLI)

# two sets of object files, one for the lib, and one for the command line interface progs
OBJECT_LIB= $(patsubst %, $(TMDIR)/%.o, $(C_BASE_LIB) $(CC_BASE_LIB))
OBJECT_CLI= $(patsubst %, $(TMDIR)/%.o, $(C_BASE_CLI) $(CC_BASE_CLI))

# executables are made from CLI sources
EXEC= (patsubst %, $(EXECDIR)/%, $(C_BASE_CLI) $(CC_BASE_CLI))

#otherwise make provides default values for these
C=
CC=

-include makefile-flags

DEPFILE=$(TMPDIR)/makefile_dep

# a single space literal, for example if you wanted to subsitute commas to
# spaces: $(subst $(space),;,$(string)) we ran into this out of a need to send
# multiple separate command arguments to a shell script from one variable value
blank :=
space :=$(blank)  $(blank)

all: version deps lib execs

version:
	@echo makefile version 3.0
	@echo "PWD: " $(PWD)
	@echo "MAKEFILE_LIST: " $(MAKEFILE_LIST)
	@echo "C: " $(C)
	@echo "CFLAGS: " $(CFLAGS)
	@echo "CC: " $(CC)
	@echo "CCFLAGS: " $(CCFLAGS)
	@echo "LINKFLAGS: " $(LINKFLAGS)

info:
	@echo "DEPDIR: " $(DEPDIR)
	@echo "DOCDIR: " $(DOCDIR)
	@echo "EXECSDIR: " $(EXECSDIR)
	@echo "INCDIR: " $(INCDIR)
	@echo "LIBDIR: " $(LIBDIR)
	@echo "TESTDIR: " $(TESTDIR)
	@echo "TMPDIR: " $(TMPDIR)
	@echo "TOOLSDIR: " $(TOOLSDIR)
	@echo "TRYDIR: " $(TRYDIR)
	@echo "DEPSFILE: " $(DEPSFILE)
	@echo "LIBFILE: " $(LIBFILE)
        @echo "TRC_TRC: " $(TRC_TRC)
	@echo "C_BASE_LIB: " $(C_BASE_LIB)
	@echo "C_BASE_CLI: " $(C_BASE_CLI)
	@echo "CC_BASE_LIB: " $(CC_BASE_LIB)
	@echo "CC_BASE_CLI: " $(CC_BASE_CLI)

# should be safe to run this in an already setup or partially setup directory
setup:
	if [ ! -e $(DEPRDIR) ]; then mkdir $(DEPRDIR); fi
	if [ ! -e $(DOCDIR) ]; then mkdir $(DOCDIR); fi
	if [ ! -e $(EXECSDIR) ]; then mkdir $(EXECSDIR); fi
	if [ ! -e $(INCDIR) ]; then mkdir $(INCDIR); fi
	if [ ! -e $(LIBDIR) ]; then mkdir $(LIBDIR); fi
	if [ ! -e $(SRCDIR) ]; then mkdir $(SRCDIR); fi
	if [ ! -e $(TESTDIR) ]; then mkdir $(TESTDIR); fi
	if [ ! -e $(TMPDIR) ]; then mkdir $(TMPDIR); fi
	if [ ! -e $(TRYDIR) ]; then mkdir $(TRYDIR); fi

dep: $(C_TRC_LIB) $(C_TRC_CLI) $(CC_TRC_LIB) $(CC_TRC_CLI)
	if [ -z "$(CC)" ]; then\
	  if [ -z "$C()" ]; then\
	    echo "No compiler specified";\
	    exit 1;\
	  else\
	    echo "C compiler only deps" ;\
	    $(C) $(CFLAGS) -MM  $(C_TRC_LIB) $(C_TRC_CLI) 1> $(DEPSFILE);\
	    echo "deps for C linking";\
	    for i in $(EXECS) ; do\
	      $(ECHO) >> $(DEPSFILE);\
	      $(ECHO) "$(EXECSDIR)/$$i : $$i.cli.o $(LIBDIR)/$(LIBFILE)" >> $(DEPSFILE);\
	      $(ECHO) "	$(C) -o $(EXECSDIR)/$$i $$i.cli.o $(LINKFLAGS)" >> $(DEPSFILE);\
	    done;\
	  fi;\
	else\
	  $(CC) $(CCFLAGS) -MM  $(CC_TRC_LIB) $(CC_TRC_CLI) 1> $(DEPSFILE);\
	  if [ -z "$C()" ]; then\
	    echo "CC compiler only deps" ;\
	  else\
	    echo "CC and C mixed compile deps" ;\
	    $(C) $(CFLAGS) -MM   $(C_TRC_LIB) $(C_TRC_CLI) 1>> $(DEPSFILE);\
	  fi;\
	  echo "deps for CC linking";\
	  for i in $(EXECS) ; do\
	    $(ECHO) >> $(DEPSFILE);\
	    $(ECHO) "$(EXECSDIR)/$$i : $$i.cli.o $(LIBDIR)/$(LIBFILE)" >> $(DEPSFILE);\
	    $(ECHO) "	$(CC) -o $(EXECSDIR)/$$i $$i.cli.o $(LINKFLAGS)" >> $(DEPSFILE);\
	  done;\
	fi

lib: 
	make $(LIBDIR)/$(LIBFILE)

$(LIBDIR)/$(LIBFILE) : $(OBJECTS_LIB)
	ar rcs $(LIBDIR)/$(LIBFILE) $(OBJECTS_LIB)

exec: $(LIBDIR)/$(LIBFILE)
	make sub_exec

sub_exec: $(patsubst %,  $(EXECSDIR)/%, $(EXECS))

stage:
	if [ -f $(LIBDIR)/$(LIBFILE) ]; then cp $(LIBDIR)/$(LIBFILE) $(PROJECT_SUBU)/stage/lib; fi
	if [ -f $(INCDIR)/$(INCFILE) ]; then cp $(INCDIR)/$(INCFILE) $(PROJECT_SUBU)/stage/include; fi
	-cp $(EXECSDIR)/* $(PROJECT_SUBU)/stage/bin

clean:
	for i in $(wildcard *~); do mv $$i $(TMPDIR); done
	for i in $(wildcard *.lib.o) $(wildcard *.cli.o); do rm $$i; done 
	for i in $(EXECS); do if [ -e $(EXECSDIR)/$$i ]; then rm $(EXECSDIR)/$$i; fi; done 
	if [ -f $(LIBDIR)/$(LIBFILE) ]; then rm $(LIBDIR)/$(LIBFILE); fi
	if [ -f $(DEPSFILE) ]; then rm $(DEPSFILE); fi

-include $(DEPSFILE)

# recipes
#
%.trc.c : %.lib.c
	$(TRANCHE) $<

%.trc.c : %.cli.c
	$(TRANCHE) $<

%.trc.cc : %.lib.cc
	$(TRANCHE) $<

%.trc.cc : %.cli.cc
	$(TRANCHE) $<

%.o : %.c
	$(C) $(CFLAGS) -c $<

%.o : %.cc
	$(CC) $(CCFLAGS) -c $<

