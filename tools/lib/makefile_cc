
SHELL=/bin/bash

# files used by the compiler
C_SOURCES_LIB= $(wildcard *.lib.c)
C_SOURCES_CLI= $(wildcard *.cli.c)
C_SOURCES= $(C_SOURCES_LIB) $(C_SOURCES_CLI)

CC_SOURCES_LIB= $(wildcard *.lib.cc)
CC_SOURCES_CLI= $(wildcard *.cli.cc)
CC_SOURCES= $(CC_SOURCES_LIB) $(CC_SOURCES_CLI)

OBJECTS_LIB=$(sort\
        $(patsubst %.c, %.o, $(C_SOURCES_LIB))\
        $(patsubst %.cc, %.o, $(CC_SOURCES_LIB))\
        )
OBJECTS_CLI=$(sort\
        $(patsubst %.c, %.o, $(C_SOURCES_CLI))\
        $(patsubst %.cc, %.o, $(CC_SOURCES_CLI))\
        )
OBJECTS= $(OBJECTS_LIB) $(OBJECTS_CLI)

EXECS= $(sort \
         $(patsubst %.cli.c,  %, $(wildcard *.cli.c))\
         $(patsubst %.cli.cc,  %, $(wildcard *.cli.cc))\
         )

#otherwise make provides default values for these
C=
CC=

-include 0_makefile-flags

DEPSFILE=$(TMPDIR)/makefile_deps

# a single space literal, for example if you wanted to subsitute commas to
# spaces: $(subst $(space),;,$(string)) we ran into this out of a need to send
# multiple separate command arguments to a shell script from one variable value
blank :=
space :=$(blank)  $(blank)


all: version deps lib execs

version:
	@echo makefile version 3.0
	@echo "PWD: " $(PWD)
	@echo "MAKEFILE_LIST: " $(MAKEFILE_LIST)
	@echo "C: " $(C)
	@echo "CFLAGS: " $(CFLAGS)
	@echo "CC: " $(CC)
	@echo "CCFLAGS: " $(CCFLAGS)
	@echo "LINKFLAGS: " $(LINKFLAGS)

info:
	@echo "DEPDIR: " $(DEPDIR)
	@echo "DOCDIR: " $(DOCDIR)
	@echo "EXECSDIR: " $(EXECSDIR)
	@echo "INCDIR: " $(INCDIR)
	@echo "LIBDIR: " $(LIBDIR)
	@echo "TESTDIR: " $(TESTDIR)
	@echo "TMPDIR: " $(TMPDIR)
	@echo "TOOLSDIR: " $(TOOLSDIR)
	@echo "TRYDIR: " $(TRYDIR)
	@echo "DEPSFILE: " $(DEPSFILE)
	@echo "LIBFILE: " $(LIBFILE)
	@echo "C_SOURCES_LIB: " $(C_SOURCES_LIB)
	@echo "C_SOURCES_CLI: " $(C_SOURCES_CLI)
	@echo "C_SOURCES: " $(C_SOURCES)
	@echo "CC_SOURCES_LIB: " $(CC_SOURCES_LIB)
	@echo "CC_SOURCES_CLI: " $(CC_SOURCES_CLI)
	@echo "CC_SOURCES: " $(CC_SOURCES)
	@echo "OBJECTS_LIB: " $(OBJECTS_LIB)
	@echo "OBJECTS_CLI: " $(OBJECTS_CLI)
	@echo "OBJECTS: " $(OBJECTS)
	@echo "EXECS: " $(EXECS)

# should be safe to run this in an already setup or partially setup directory
setup:
	if [ ! -e $(DEPRDIR) ]; then mkdir $(DEPRDIR); fi
	if [ ! -e $(DOCDIR) ]; then mkdir $(DOCDIR); fi
	if [ ! -e $(EXECSDIR) ]; then mkdir $(EXECSDIR); fi
	if [ ! -e $(INCDIR) ]; then mkdir $(INCDIR); fi
	if [ ! -e $(LIBDIR) ]; then mkdir $(LIBDIR); fi
	if [ ! -e $(TESTDIR) ]; then mkdir $(TESTDIR); fi
	if [ ! -e $(TMPDIR) ]; then mkdir $(TMPDIR); fi
	if [ ! -e $(TRYDIR) ]; then mkdir $(TRYDIR); fi

deps:
	@if [ -z "$(CC)" ]; then\
	  if [ -z "$C()" ]; then\
	    echo "No compiler specified";\
	    exit 1;\
	  else\
	    echo "C compiler only deps" ;\
	    $(C) $(CFLAGS) -MM  $(C_SOURCES) 1> $(DEPSFILE);\
	    echo "deps for C linking";\
	    for i in $(EXECS) ; do\
	      $(ECHO) >> $(DEPSFILE);\
	      $(ECHO) "$(EXECSDIR)/$$i : $$i.cli.o $(LIBDIR)/$(LIBFILE)" >> $(DEPSFILE);\
	      $(ECHO) "	$(C) -o $(EXECSDIR)/$$i $$i.cli.o $(LINKFLAGS)" >> $(DEPSFILE);\
	    done;\
	  fi;\
	else\
	  $(CC) $(CCFLAGS) -MM  $(CC_SOURCES) 1> $(DEPSFILE);\
	  if [ -z "$C()" ]; then\
	    echo "CC compiler only deps" ;\
	  else\
	    echo "CC and C mixed compile deps" ;\
	    $(C) $(CFLAGS) -MM  $(C_SOURCES) 1>> $(DEPSFILE);\
	  fi;\
	  echo "deps for CC linking";\
	  for i in $(EXECS) ; do\
	    $(ECHO) >> $(DEPSFILE);\
	    $(ECHO) "$(EXECSDIR)/$$i : $$i.cli.o $(LIBDIR)/$(LIBFILE)" >> $(DEPSFILE);\
	    $(ECHO) "	$(CC) -o $(EXECSDIR)/$$i $$i.cli.o $(LINKFLAGS)" >> $(DEPSFILE);\
	  done;\
	fi

lib: 
	make $(LIBDIR)/$(LIBFILE)

$(LIBDIR)/$(LIBFILE) : $(OBJECTS_LIB)
	if [ ! -e $(DEPSFILE) ]; then make deps; fi
	ar rcs $(LIBDIR)/$(LIBFILE) $(OBJECTS_LIB)

execs: $(LIBDIR)/$(LIBFILE)
	make sub_execs

sub_execs: $(patsubst %,  $(EXECSDIR)/%, $(EXECS))

stage:
	if [ -f $(LIBDIR)/$(LIBFILE) ]; then cp $(LIBDIR)/$(LIBFILE) $(PROJECT_SUBU)/stage/lib; fi
	if [ -f $(INCDIR)/$(INCFILE) ]; then cp $(INCDIR)/$(INCFILE) $(PROJECT_SUBU)/stage/include; fi
	-cp $(EXECSDIR)/* $(PROJECT_SUBU)/stage/bin

clean:
	for i in $(wildcard *~); do mv $$i $(TMPDIR); done
	for i in $(wildcard *.lib.o) $(wildcard *.cli.o); do rm $$i; done 
	for i in $(EXECS); do if [ -e $(EXECSDIR)/$$i ]; then rm $(EXECSDIR)/$$i; fi; done 
	if [ -f $(LIBDIR)/$(LIBFILE) ]; then rm $(LIBDIR)/$(LIBFILE); fi
	if [ -f $(DEPSFILE) ]; then rm $(DEPSFILE); fi

-include $(DEPSFILE)

# recipe for making object files:
#
%.o : %.c
	$(C) $(CFLAGS) -c $<

%.o : %.cc
	$(CC) $(CCFLAGS) -c $<


