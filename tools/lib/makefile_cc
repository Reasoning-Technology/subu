
SHELL=/bin/bash

-include 0_makefile_flags

DEPS_FILE=$(TMPDIR)/makefile_deps

# a single space literal, for example if you wanted to subsitute commas to
# spaces: $(subst $(space),;,$(string)) we ran into this out of a need to send
# multiple separate command arguments to a shell script from one variable value
blank :=
space :=$(blank)  $(blank)

# files used by the compiler
SOURCES_LIB= $(wildcard *.lib.c)
SOURCES_CLI= $(wildcard *.cli.c)
SOURCES= $(SOURCES_LIB) $(SOURCES_CLI)

HFILES = $(wildcard *.lib.h) $(wildcard *.cli.h)

OBJECTS_LIB= $(patsubst %.c, %.o, $(SOURCES_LIB))
OBJECTS_CLI= $(patsubst %.c, %.o, $(SOURCES_CLI))
OBJECTS= $(OBJECTS_LIB) $(OBJECTS_CLI)

EXECS= $(sort $(patsubst %.cli.c,  %, $(wildcard *.cli.c)))

all: version deps lib execs

version:
	@echo '---- make $@:------------------------------------------------------------'
	@echo makefile version 3.0
	@echo "PWD: " $(PWD)
	@echo "MAKEFILE_LIST: " $(MAKEFILE_LIST)
	@echo "CC: " $(CC)
	@echo "CFLAGS: " $(CFLAGS)
	@echo "LINKFLAGS: " $(LINKFLAGS)
	@echo '______end make $@_____'

info:
	@echo '---- make $@:------------------------------------------------------------'
	@echo "DEPDIR: " $(DEPDIR)
	@echo "DOCDIR: " $(DOCDIR)
	@echo "EXECSDIR: " $(EXECSDIR)
	@echo "HDIR: " $(HDIR)
	@echo "LIBDIR: " $(LIBDIR)
	@echo "TESTDIR: " $(TESTDIR)
	@echo "TMPDIR: " $(TMPDIR)
	@echo "TOOLSDIR: " $(TOOLSDIR)
	@echo "TRYDIR: " $(TRYDIR)
	@echo "DEPS_FILE: " $(DEPS_FILE)
	@echo "LIB_FILE: " $(LIB_FILE)
	@echo "SOURCES_LIB: " $(SOURCES_LIB)
	@echo "SOURCES_CLI: " $(SOURCES_CLI)
	@echo "SOURCES: " $(SOURCES)
	@echo "HFILES: " $(HFILES)
	@echo "OBJECTS_LIB: " $(OBJECTS_LIB)
	@echo "OBJECTS_CLI: " $(OBJECTS_CLI)
	@echo "OBJECTS: " $(OBJECTS)
	@echo "EXECS: " $(EXECS)
	@echo '______end make $@_____'

# should be safe to run this in an already setup or partially setup directory
setup:
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	if [ ! -e $(DEPRDIR) ]; then mkdir $(DEPRDIR); fi
	if [ ! -e $(DOCDIR) ]; then mkdir $(DOCDIR); fi
	if [ ! -e $(EXECSDIR) ]; then mkdir $(EXECSDIR); fi
	if [ ! -e $(HDIR) ]; then mkdir $(HDIR); fi
	if [ ! -e $(LIBDIR) ]; then mkdir $(LIBDIR); fi
	if [ ! -e $(TESTDIR) ]; then mkdir $(TESTDIR); fi
	if [ ! -e $(TMPDIR) ]; then mkdir $(TMPDIR); fi
	if [ ! -e $(TRYDIR) ]; then mkdir $(TRYDIR); fi
	@echo '______end make $@_____'

deps:
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	$(CC) $(CFLAGS) -MM $(SOURCES) 1> $(DEPS_FILE)
	for i in $(EXECS) ; do\
           $(ECHO) >> $(DEPS_FILE);\
           $(ECHO) "$(EXECSDIR)/$$i : $$i.cli.o $(LIB_FILE)" >> $(DEPS_FILE);\
           $(ECHO) "	$(CC) -o $(EXECSDIR)/$$i $$i.cli.o $(LINKFLAGS)" >> $(DEPS_FILE);\
        done
	@echo '______end make $@_____'

lib: 
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	if [ ! -e $(DEPS_FILE) ]; then make deps; fi
	make sub_lib
	@echo '______end make $@_____'

sub_lib: $(LIB_FILE)


execs: $(LIB_FILE)
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	if [ ! -e $(DEPS_FILE) ]; then make deps; fi
	make sub_execs
	@echo '______end make $@_____'

sub_execs: $(patsubst %,  $(EXECSDIR)/%, $(EXECS))

clean:
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	for i in $(wildcard *~); do mv $$i $(TMPDIR); done
	for i in $(wildcard *.lib.o) $(wildcard *.cli.o); do rm $$i; done 
	for i in $(EXECS); do if [ -e $(EXECSDIR)/$$i ]; then rm $(EXECSDIR)/$$i; fi; done 
	if [ -f $(LIB_FILE) ]; then rm $(LIB_FILE); fi
	if [ -f $(DEPS_FILE) ]; then rm $(DEPS_FILE); fi
	@echo '______end make $@_____'

dist-clean:
	@echo '---- make $@:------------------------------------------------------------'
	@echo `pwd`'>' 
	make clean
	if [ -d $(TESTDIR) ]; then cd $(TESTDIR); make dist_clean; fi
	if [ -d $(TRYDIR) ] ; then cd $(TRYDIR); make dist_clean; fi
	@echo '______end make $@_____'

#
$(LIB_FILE) : $(OBJECTS_LIB)
	ar rcs $(LIB_FILE) $(OBJECTS_LIB)

-include $(DEPS_FILE)

# recipe for making object files:
#
%.o : %.c
	$(CC) $(CFLAGS) -c $<


